{"version":3,"file":"index.d00b1045.js","sources":["../../src/FirstPersonControls.ts","../../src/main.ts"],"sourcesContent":["import CubicBezier from '@thednp/bezier-easing';\nimport { MathUtils, Spherical, Vector3 } from 'three';\nimport * as THREE from 'three';\n\n/**\n * HashTable of gamepads\n */\ninterface GamePadHashTable\n{\n    [index: string]: Gamepad\n}\n\n/**\n * Provides First-Person-Contorls.\n */\nexport class FirstPersonControls\n{\n    // #region fields\n    /**\n     * Contains function that need to be called when the class is cleaned up.\n     */\n    private readonly cleanUpActions: Array<() => void>;\n\n    /**\n     * The camera of the player\n     */\n    private readonly object: THREE.Camera;\n\n    /**\n     * The canvas-HTMLElement that the scene is renderd to.\n     */\n    private readonly domElement: HTMLCanvasElement;\n\n    /**\n     * The direction the camera is looking at.\n     */\n    private readonly lookDirection: Vector3;\n\n    /**\n     * The last target the camera is looking at.\n     */\n    private readonly lookTarget: Vector3;\n\n    private readonly spherical: Spherical;\n\n    /**\n     * HashTable of the connected gamepads\n     */\n    private readonly gamepadHashTable: GamePadHashTable;\n\n    /**\n     * A function to ease the controller input by a cubic bezier function\n     */\n    private readonly controllerLookSpeedCubicBezier: (progressInPercent: number) => number;\n\n    private ViewHalfX: number;\n\n    private ViewHalfY: number;\n\n    private latitude: number;\n\n    private longitude: number;\n\n    /**\n     * The amount the player is moved in the x axis in the next {@link Update}.\n     */\n    private XMovement: number;\n\n    /**\n     * The amount the player is moved in the y axis in the next {@link Update}.\n     */\n    private YMovement: number;\n\n    /**\n     * The amount the player is moved in the z axis in the next {@link Update}.\n     */\n    private ZMovement: number;\n\n    /**\n     * The amount the controller axis for looking in the x direction is.\n     */\n    private controllerXLook: number;\n\n    /**\n     * The amount the controller axis for looking in the y direction is.\n     */\n    private controllerYLook: number;\n\n    /**\n     * The amount the mouse axis for looking in the x direction is.\n     */\n    private mouseXLook: number;\n\n    /**\n     * The amount the controller axis for looking in the y direction is.\n     */\n    private mouseYLook: number;\n\n    private lookTargetPosition: Vector3;\n    // #endregion\n\n    // #region ctor\n    /**\n     * Initialiert die Klasse\n     * \n     * @param object The camera of the player\n     * @param domElement The canvas-HTMLElement that the scene is renderd to.\n     */\n    public constructor( object: THREE.Camera, domElement: HTMLCanvasElement )\n    {\n        this.cleanUpActions = new Array<() => void>();\n\n        this.object = object;\n        this.domElement = domElement;\n\n        this.lookDirection = new Vector3();\n        this.lookTarget = new Vector3();\n        this.spherical = new Spherical();\n        this.lookTargetPosition = new Vector3();\n\n        this.controllerLookSpeedCubicBezier = <(progressInPercent: number) => number><unknown>new CubicBezier(0.33,0,1,0.66);\n\n        this.gamepadHashTable = {};\n\n        this.Enabled = true;\n        this.MovementSpeed = 1.0;\n        this.MouseLookSpeed = 0.005;\n        this.ControllerLookSpeed = 1;\n\n        this.ViewHalfX = 0;\n        this.ViewHalfY = 0;\n\n        this.XMovement = 0;\n        this.YMovement = 0;\n        this.ZMovement = 0;\n\n        this.controllerXLook = 0;\n        this.controllerYLook = 0;\n\n        this.mouseXLook = 0;\n        this.mouseYLook = 0;\n\n        this.longitude = 0;\n        this.latitude = 0;\n\n        this.HeightSpeed = false;\n        this.HeightCoefficient = 1.0;\n        this.HeightMin = 0.0;\n        this.HeightMax = 1.0;\n\n        this.AutoSpeedFactor = 0.0;\n\n        this.AutoForward = false;\n        this.UseController = true;\n\n        this.ActiveLook = true;\n        this.LookVertical = true;\n\n        this.ConstrainVertical = false;\n        this.VerticalMin = 0;\n        this.VerticalMax = Math.PI;\n\n        let contextMenuHandler = (event: Event) => { this.HandleOnContextMenu(event) };\n        this.domElement.addEventListener( 'contextmenu', contextMenuHandler);\n        this.cleanUpActions.push(() => { this.domElement.removeEventListener( 'contextmenu', contextMenuHandler); });\n\n        let mouseMoveHandler = (event: MouseEvent) => { this.HandleOnMouseMove(event) };\n        this.domElement.addEventListener( 'mousemove', mouseMoveHandler);\n        this.cleanUpActions.push(() => { this.domElement.removeEventListener( 'mousemove', mouseMoveHandler); });\n\n        let mouseDownHandler = (event: MouseEvent) => { this.HandleOnMouseDown(event) };\n        this.domElement.addEventListener( 'mousedown', mouseDownHandler);\n        this.cleanUpActions.push(() => { this.domElement.removeEventListener( 'mousedown', mouseDownHandler); });\n\n        let mouseUpHandler = (event: MouseEvent) => { this.HandleOnMouseUp(event) };\n        this.domElement.addEventListener( 'mouseup', mouseUpHandler);\n        this.cleanUpActions.push(() => { this.domElement.removeEventListener( 'mouseup', mouseUpHandler); });\n\n        let keyboardKeyDownHandler = (event: KeyboardEvent) => { this.HandleOnKeyDown(event) };\n        window.addEventListener( 'keydown', keyboardKeyDownHandler);\n        this.cleanUpActions.push(() => { window.removeEventListener( 'keydown', keyboardKeyDownHandler); });\n\n        let keyboardKeyUpHandler = (event: KeyboardEvent) => { this.HandleOnKeyUp(event) };\n        window.addEventListener( 'keyup', keyboardKeyUpHandler);\n        this.cleanUpActions.push(() => { window.removeEventListener( 'keyup', keyboardKeyUpHandler); });\n\n        let gamepadConnectedHandler = (event: GamepadEvent) => { this.HandleOnControllerConnected(event) };\n        window.addEventListener( 'gamepadconnected', gamepadConnectedHandler);\n        this.cleanUpActions.push(() => { window.removeEventListener( 'gamepadconnected', gamepadConnectedHandler); });\n\n        let gamepadDisconnectedHandler = (event: GamepadEvent) => { this.HandleOnControllerDisconnected(event) };\n        window.addEventListener( 'gamepaddisconnected', gamepadDisconnectedHandler);\n        this.cleanUpActions.push(() => { window.removeEventListener( 'gamepaddisconnected', gamepadDisconnectedHandler); });\n\n        this.HandleResize();\n        this.SetOrientation();\n    }\n    // #endregion\n\n    // #region Enabled\n    /**\n     * Controls if this first-person-control are active.\n     */\n    public Enabled: boolean;\n    // #endregion\n\n    // #region MovementSpeed\n    /**\n     * The movement speed of the player.\n     */\n    public MovementSpeed: number;\n    // #endregion\n\n    // #region MouseLookSpeed\n    /**\n     * The speed of looking around with the mouse.\n     */\n    public MouseLookSpeed: number;\n    // #endregion\n\n    // #region ControllerLookSpeed\n    /**\n     * The speed of looking around with the controller.\n     */\n    public ControllerLookSpeed: number;\n    // #endregion\n\n    public HeightSpeed: boolean;\n\n    public HeightCoefficient: number;\n\n    public HeightMin: number;\n\n    public HeightMax: number;\n\n    public AutoSpeedFactor: number;\n\n    public AutoForward: boolean;\n\n    public ActiveLook: boolean;\n\n    public ConstrainVertical: boolean;\n\n    public VerticalMin: number;\n\n    public VerticalMax: number;\n\n    public LookVertical: boolean;\n\n    public UseController: boolean;\n\n    // #region Dispose\n    /**\n     * Cleans up the class\n     */\n    public Dispose()\n    {\n        for (let cleanUpAction of this.cleanUpActions)\n        {\n            cleanUpAction();\n        }\n        this.cleanUpActions.length = 0;\n    }\n    // #endregion\n\n    // #region LookAt\n    /**\n     * Truns the camera to look at the target\n     * \n     * @param vector The vector to look at\n     */\n    public LookAt(vector: THREE.Vector3): void;\n\n    /**\n     * Truns the camera to look at the target\n     * \n     * @param x The x coordinate to look at\n     * @param y The y coordinate to look at\n     * @param z The z coordinate to look at\n     */\n    public LookAt(x: number, y: number, z: number): void;\n\n    public LookAt(xOrVector: THREE.Vector3 | number, yOrUndefined?: number, zOrUndefined?: number): void\n    {\n        if (xOrVector instanceof THREE.Vector3)\n        {\n            this.lookTarget.copy(xOrVector);\n        }\n        else\n        {\n            \n            this.lookTarget.set( xOrVector, <number>yOrUndefined, <number>zOrUndefined );\n        }\n\n        this.object.lookAt(this.lookTarget);\n\n        this.SetOrientation();\n    }\n    // #endregion\n\n    // #region Update\n    /**\n     * Updates the first person control for this game loop.\n     * \n     * @param clockDelta The delta in milliseconds since the last game loop\n     */\n    public Update(clockDelta: number): void\n    {\n        if (this.Enabled === false)\n        {\n            return;\n        }\n\n        this.CheckAndProcessControllerInput();\n\n        if (this.HeightSpeed)\n        {\n            const y = MathUtils.clamp( this.object.position.y, this.HeightMin, this.HeightMax );\n            const heightDelta = y - this.HeightMin;\n\n            this.AutoSpeedFactor = clockDelta * ( heightDelta * this.HeightCoefficient );\n        }\n        else\n        {\n            this.AutoSpeedFactor = 0.0;\n        }\n\n        const actualMoveSpeed = clockDelta * this.MovementSpeed;\n\n        if (Math.abs(this.ZMovement) > 0  || this.AutoForward)\n        {            \n            this.object.translateZ((actualMoveSpeed + this.AutoSpeedFactor) * this.ZMovement);\n        }\n\n        if (Math.abs(this.XMovement) > 0)\n        {\n            this.object.translateX(actualMoveSpeed * this.XMovement);\n        }\n\n        if (Math.abs(this.YMovement) > 0)\n        {\n            this.object.translateY(actualMoveSpeed * this.YMovement);\n        }\n\n        let actualLookSpeed = clockDelta * this.MouseLookSpeed;\n\n        if (this.ActiveLook == false)\n        {\n            actualLookSpeed = 0;\n        }\n\n        let verticalLookRatio = 1;\n\n        if (this.ConstrainVertical)\n        {\n            verticalLookRatio = Math.PI / (this.VerticalMax - this.VerticalMin);\n        }\n\n        if (Math.abs(this.mouseXLook) > 0)\n        {\n            // Is subtracted, because the origin of the mouse is in the top-left corner.\n            // Therefor it needs to be inverted\n            this.longitude -= this.mouseXLook * actualLookSpeed;\n        }\n        if (Math.abs(this.controllerXLook) > 0)\n        {\n            this.longitude += this.controllerXLook * actualLookSpeed * this.ControllerLookSpeed;\n        }\n\n        if (this.LookVertical)\n        {\n            if (Math.abs(this.mouseYLook) > 0)\n            {\n                // Is subtracted, because the origin of the mouse is in the top-left corner.\n                // Therefor it needs to be inverted\n                this.latitude -= this.mouseYLook * actualLookSpeed * verticalLookRatio;\n            }\n            if (Math.abs(this.controllerYLook) > 0)\n            {\n                this.latitude += this.controllerYLook * actualLookSpeed * verticalLookRatio * this.ControllerLookSpeed;\n            }\n        }\n\n        this.latitude = Math.max(-85, Math.min(85, this.latitude) );\n\n        let phi = MathUtils.degToRad(90 - this.latitude);\n        const theta = MathUtils.degToRad(this.longitude);\n\n        if (this.ConstrainVertical)\n        {\n            phi = MathUtils.mapLinear(phi, 0, Math.PI, this.VerticalMin, this.VerticalMax);\n        }\n\n        const position = this.object.position;\n\n        this.lookTargetPosition.setFromSphericalCoords( 1, phi, theta ).add( position );\n\n        this.object.lookAt(this.lookTargetPosition);\n        \n        // Reset the mouse movement since it was processed.\n        // Needs to be done because the mouse move event does not return movement 0, 0\n        this.mouseXLook = 0;\n        this.mouseYLook = 0;\n    }\n    // #endregion\n\n    // #region HandleResize\n    /**\n     * Sets the height and with values of the view. Call this after an resize.\n     */\n    private HandleResize(): void\n    {\n        this.ViewHalfX = this.domElement.offsetWidth / 2;\n        this.ViewHalfY = this.domElement.offsetHeight / 2;\n    }\n    // #endregion\n\n    // #region HandleOnMouseDown\n    /**\n     * Is called, when the mouse button is pressed down on the canvas\n     * \n     * @param event The eventargs\n     */\n    private HandleOnMouseDown(event: MouseEvent): void\n    {\n        event.preventDefault();\n\n        if (document.pointerLockElement == this.domElement)\n        {\n            console.debug(\"The canvas already has the pointer lock.\");\n        }\n        else\n        {\n            console.debug(\"The canvas does not jet have the pointer lock. Requesting...\");\n            this.domElement.requestPointerLock();\n        }\n    }\n    // #endregion\n\n    // #region HandleOnMouseUp\n    /**\n     * Is called, when the mouse button is release on the canvas\n     * \n     * @param event The eventargs\n     */\n    private HandleOnMouseUp(event: MouseEvent): void\n    {\n        event.preventDefault();\n    }\n    // #endregion\n\n    // #region HandleOnMouseMove\n    /**\n     * Is called when the mouse is moved on the canvas\n     * \n     * @param event \n     */\n    private HandleOnMouseMove(event: MouseEvent): void\n    {\n        this.mouseXLook = event.movementX;\n        this.mouseYLook = event.movementY;\n    }\n    // #endregion\n\n    // #region HandleOnKeyDown\n    /**\n     * Is called when a key the keyboard is pressed down\n     * \n     * @param event The event args\n     */\n    private HandleOnKeyDown(event: KeyboardEvent): void\n    {\n        switch ( event.code )\n        {\n            case 'ArrowUp':\n            case 'KeyW': \n                this.ZMovement = -1.0; \n                break;\n\n            case 'ArrowLeft':\n            case 'KeyA':\n                this.XMovement = -1.0;\n                break;\n\n            case 'ArrowDown':\n            case 'KeyS':\n                this.ZMovement = 1.0;\n                break;\n\n            case 'ArrowRight':\n            case 'KeyD':\n                this.XMovement = 1.0;\n                break;\n\n            case 'ShiftLeft':\n                this.YMovement = -1.0;\n                break;\n\n            case 'Space':\n                this.YMovement = 1.0;\n                break;\n\n        }\n    }\n    // #endregion\n\n    // #region HandleOnKeyUp\n    /**\n     * Is called when a key the keyboard is released\n     * \n     * @param event The event args\n     */\n    private HandleOnKeyUp(event: KeyboardEvent): void\n    {\n        switch ( event.code )\n        {\n            case 'ArrowUp':\n            case 'KeyW':\n                this.ZMovement = 0;\n                break;\n\n            case 'ArrowLeft':\n            case 'KeyA':\n                this.XMovement = 0;\n                break;\n\n            case 'ArrowDown':\n            case 'KeyS':\n                this.ZMovement = 0;\n                break;\n\n            case 'ArrowRight':\n            case 'KeyD':\n                this.XMovement = 0;\n                break;\n\n            case 'ShiftLeft':\n                this.YMovement = 0;\n                break;\n\n            case 'Space':\n                this.YMovement = 0;\n                break;\n\n        }\n    }\n    // #endregion\n\n    // #region HandleOnControllerConnected\n    /**\n     * Is called when a controller is connected\n     * \n     * @param gamepadEvent The event args\n     */\n    public HandleOnControllerConnected(gamepadEvent: GamepadEvent): void\n    {\n        console.debug(\n            \"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\n            gamepadEvent.gamepad.index,\n            gamepadEvent.gamepad.id,\n            gamepadEvent.gamepad.buttons.length,\n            gamepadEvent.gamepad.axes.length\n        );\n\n        this.gamepadHashTable[gamepadEvent.gamepad.index] = gamepadEvent.gamepad;\n    }\n    // #endregion\n\n    // #region HandleOnControllerDisconnected\n    /**\n     * Is called when a controller is disconnected\n     * \n     * @param gamepadEvent The event args\n     */\n    public HandleOnControllerDisconnected(gamepadEvent: GamepadEvent): void\n    {\n        console.log(\n            \"Gamepad disconnected from index %d: %s\",\n            gamepadEvent.gamepad.index,\n            gamepadEvent.gamepad.id,\n        );\n\n        delete this.gamepadHashTable[gamepadEvent.gamepad.index];\n    }\n    // #endregion\n\n    // #region CheckAndProcessControllerInput\n    /**\n     * Checks if an input on a controller has changed and\n     * processes it\n     */\n    public CheckAndProcessControllerInput(): void\n    {\n        const axisDeadZone = 0.05;\n        let firstGamepad: Gamepad | null = null;\n\n        for (let index in this.gamepadHashTable)\n        {\n            firstGamepad = this.gamepadHashTable[index];\n            break;\n        }\n\n        if (firstGamepad != null)\n        {\n            let moveXAmount = firstGamepad.axes[0];\n            let moveZAmount = firstGamepad.axes[1];\n            let moveYAmount = 0;\n            let lookXAmount = firstGamepad.axes[3];\n            let lookYAmount = firstGamepad.axes[4];\n\n            if (Math.abs(moveXAmount) < axisDeadZone)\n            {\n                moveXAmount = 0;\n            }\n\n            if (Math.abs(moveZAmount) < axisDeadZone)\n            {\n                moveZAmount = 0;\n            }\n\n            if (firstGamepad.buttons[11].pressed)\n            {\n                moveYAmount += -1;\n            }\n\n            if (firstGamepad.buttons[0].pressed)\n            {\n                moveYAmount += 1;\n            }\n\n            if (Math.abs(lookXAmount) < axisDeadZone)\n            {\n                lookXAmount = 0;\n            }\n\n            if (Math.abs(lookYAmount) < axisDeadZone)\n            {\n                lookYAmount = 0;\n            }\n\n            this.XMovement = moveXAmount;\n            this.YMovement = moveYAmount;\n            this.ZMovement = moveZAmount;\n\n            lookXAmount = this.ScaleControllerLookAxis(lookXAmount);\n            lookYAmount = this.ScaleControllerLookAxis(lookYAmount);\n\n            this.controllerXLook = lookXAmount * -1;\n            this.controllerYLook = lookYAmount * -1;\n        }\n    }\n    // #endregion\n\n    // #region ScaleControllerLookAxis\n    /**\n     * Scales the look axis value of a controller\n     * \n     * @param value The value to scale\n     * @returns The scaled value\n     */\n    private ScaleControllerLookAxis(value: number): number\n    {\n        let scaledValue = this.controllerLookSpeedCubicBezier(Math.abs(value));\n\n        if (value < 0)\n        {\n            scaledValue *= -1;\n        }\n\n        return scaledValue;\n    }\n    // #endregion\n\n    private SetOrientation(): void\n    {\n        const quaternion = this.object.quaternion;\n\n        this.lookDirection.set(0, 0, - 1).applyQuaternion(quaternion);\n        this.spherical.setFromVector3( this.lookDirection );\n\n        this.latitude = 90 - MathUtils.radToDeg( this.spherical.phi );\n        this.longitude = MathUtils.radToDeg( this.spherical.theta );\n    }\n\n    // #region HandleOnContextMenu\n    /**\n     * Is called when the context menu is opended.\n     * Prevents the default Action\n     * \n     * @param event The event args\n     */\n    private HandleOnContextMenu(event: Event)\n    {\n        debugger;\n        event.preventDefault();\n    }\n    // #endregion\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport * as STATS from 'stats.js'\nimport { FirstPersonControls } from './FirstPersonControls';\n\n/**\n * Hauptklasse von der Anwendung\n */\nclass Main\n{\n    // #region fields\n    /**\n     * Die Hauptszene\n     */\n    private readonly mainScene: THREE.Scene;\n\n    /**\n     * Die Kamera vom Spieler\n     */\n    private readonly playerCamera: THREE.PerspectiveCamera;\n\n    /**\n     * Statistiken über das Rendern\n     */\n    private readonly stats: STATS | null;\n\n    /**\n     * Object for keeping track of time\n     */\n    private readonly clock: THREE.Clock;\n\n    /**\n     * The Overlay-HTML-Element over the canvas\n     */\n    private overlayElement: HTMLElement | null;\n\n    /**\n     * The Text being displayed in the canvas.\n     */\n    private overlayTextElement: HTMLParagraphElement | null;\n\n    /**\n     * Der pirmäre Renderer\n     */\n    private mainRenderer: THREE.WebGLRenderer;\n\n    /**\n     * Der Torus, welcher sind in der Mitte von der Szene befindet.\n     */\n    private torus: THREE.Mesh<THREE.TorusGeometry, THREE.MeshStandardMaterial, THREE.Object3DEventMap> | null;\n\n    /**\n     * Steuerung um die Spieler-Kamera in einem Orbit um den 0 Punkt herum zu bewegen\n     */\n    private orbitControls: OrbitControls | null;\n\n    /**\n     * Steuerung um die Spieler-Kamera in First-Person zu bewegen.\n     */\n    private firstPersonControls: FirstPersonControls | null;\n    // #endregion\n\n    // #region ctor\n    /**\n     * Initialisiert die Klasse\n     */\n    public constructor()\n    {\n        this.stats = null;\n\n        this.mainScene = new THREE.Scene();\n\n        this.playerCamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);\n\n        this.mainRenderer = new THREE.WebGLRenderer();\n\n        try\n        {\n            this.stats = new STATS();\n            this.stats.showPanel(0);\n        }\n        catch(error)\n        {\n            console.error(\"Error displaying Stats-Panel: %o\", error);\n        }\n\n        this.clock = new THREE.Clock(true);\n\n        this.torus = null;\n\n        this.orbitControls = null;\n        this.firstPersonControls = null;\n\n        this.overlayElement = null;\n        this.overlayTextElement = null;\n\n        document.addEventListener(\n            \"pointerlockchange\", \n            (event: Event) =>\n            {\n                if (this.firstPersonControls && this.firstPersonControls.Enabled)\n                {\n                    if (document.pointerLockElement)\n                    {\n                        this.HideOverlay();\n                    }\n                    else\n                    {\n                        this.ShowOverlay(\"Klicken zum steuern...\");\n                    }\n                }\n            }, \n            false\n        );\n    }\n    // #endregion\n\n    // #region Load\n    /**\n     * Lädt die Szene und startet die Render-Loop\n     */\n    public Load()\n    {\n        console.info(\"Main.Load wurde aufgerufen...\");\n\n        if (this.stats != null)\n        {\n            document.body.appendChild(this.stats.dom);\n        }\n\n        this.overlayElement = <HTMLElement>document.querySelector(\".Overlay\");\n        this.overlayTextElement = <HTMLParagraphElement>document.querySelector(\".OverlayText\");\n        let mainCanvas = <HTMLCanvasElement>document.querySelector(\".MainCanvas\");\n\n        console.debug(\"Renderer wird initialisieren...\");\n        this.mainRenderer = new THREE.WebGLRenderer(\n            {\n                canvas: mainCanvas\n            }\n        );\n        console.debug(\"Setzte Renderer device pixel ratio auf %f...\", window.devicePixelRatio);\n        this.mainRenderer.setPixelRatio(window.devicePixelRatio);\n        console.debug(\"Setzte Renderer größe auf %f x %f...\", window.innerWidth, window.innerHeight);\n        this.mainRenderer.setSize(window.innerWidth, window.innerHeight);\n\n        console.debug(\"Bewege die Spieler-Kamera auf Z %f...\", 30);\n        this.playerCamera.position.setZ(30);\n\n        console.debug(\"Erstelle einen Torus in der mitte von der Szene...\");\n        let geometry = new THREE.TorusGeometry( 10, 3, 16, 100 );\n        let material = new THREE.MeshStandardMaterial( { color: 0xFF3000 } );\n        this.torus = new THREE.Mesh( geometry, material );\n\n        this.mainScene.add(this.torus);\n\n        let x = 20;\n        let y = 5;\n        let z = 5;\n        console.debug(\"Erstelle ein Punktlicht an %f, %f, %f mit der Farbe gelb...\", x, y, z);\n        let pointLight = new THREE.PointLight(0xFFFF00);\n        pointLight.position.set(x, y, z);\n        this.mainScene.add(pointLight);\n\n        console.debug(\"Erstelle AmbientLight mit helligkeit 25%...\");\n        let ambientLight = new THREE.AmbientLight(0xFFFFFF, 0.25);\n        this.mainScene.add(ambientLight);\n\n        console.debug(\"Erstell einen Helper für das PointLight (damit dieses sichtbar ist)...\");\n        let lightHelper = new THREE.PointLightHelper(pointLight);\n        this.mainScene.add(lightHelper);\n\n        console.debug(\"Erstell GridHelper, damit die höhe 0 angezeigt wird...\");\n        let gridHelper = new THREE.GridHelper(200, 50);\n        this.mainScene.add(gridHelper);\n\n        console.debug(\"Füge Orbitalsteuerung hinzu...\");\n        this.orbitControls = new OrbitControls(this.playerCamera, this.mainRenderer.domElement);\n\n        console.debug(\"Füge FPS-Steuerung hinzu (deaktiviert)...\");\n        this.firstPersonControls = new FirstPersonControls(this.playerCamera, this.mainRenderer.domElement);\n        this.firstPersonControls.Enabled = false;\n        this.firstPersonControls.MouseLookSpeed = 5;\n        this.firstPersonControls.MovementSpeed = 10;\n        this.firstPersonControls.ControllerLookSpeed = 50;\n\n        window.addEventListener(\n            \"keydown\",\n            (event) => {\n                if (event.code == \"KeyQ\")\n                {\n                    console.debug(\"Leertaste wurde gedrückt. Wechsle die Sterungsart...\");\n                    this.firstPersonControls!.Enabled = this.firstPersonControls!.Enabled == false;\n                    this.orbitControls!.enabled = this.orbitControls!.enabled == false;\n\n                    if (this.firstPersonControls!.Enabled && document.pointerLockElement === null)\n                    {\n                        this.ShowOverlay(\"Klicken zum steuern...\");\n                    }\n                    else\n                    {\n                        this.HideOverlay();\n                    }\n\n                    if (this.orbitControls!.enabled)\n                    {\n                        document.exitPointerLock();\n                    }\n                }\n            }\n        );\n\n        console.debug(\"Füge 200 Sterne (Sphären) an zufälligen Koordinaten hinzu...\");\n        for (let i = 0; i < 200; i++)\n        {\n            this.AddStar();   \n        }\n\n        let spaceTexture = new THREE.TextureLoader().load(document.location + \"/space.jpg\");\n        this.mainScene.background = spaceTexture;\n\n        let moonTexture = new THREE.TextureLoader().load(document.location + \"/moon.jpg\");\n        let moonNormalTexture = new THREE.TextureLoader().load(document.location + \"/normal.jpg\");\n\n        console.debug(\"Füge einen Sphäre mit Mond-Textur und -Noramltextur in der mitte der Szene hinzu...\");\n        let moon = new THREE.Mesh(\n            new THREE.SphereGeometry(3, 32, 32),\n            new THREE.MeshStandardMaterial(\n                {\n                    map: moonTexture,\n                    normalMap: moonNormalTexture\n                }\n            )\n        );\n        this.mainScene.add(moon);\n\n        console.debug(\"Starte die Gameloop...\");\n        this.GameLoop();\n    }\n    // #endregion\n\n    // #region GameLoop\n    /**\n     * Die GameLoop, in welcher gerendert wird.\n     */\n    private GameLoop()\n    {\n        this.stats?.begin();\n        if (this.torus != null)\n        {\n            this.torus.rotation.x += 0.01;\n            this.torus.rotation.y += 0.005;\n            this.torus.rotation.z += 0.01;\n        }\n\n        if (this.orbitControls != null && this.orbitControls.enabled)\n        {\n            this.orbitControls?.update();\n        }\n        if (this.firstPersonControls != null && this.firstPersonControls.Enabled)\n        {\n            this.firstPersonControls?.Update(this.clock.getDelta());\n        }\n\n        this.mainRenderer.render(this.mainScene, this.playerCamera);\n        this.stats?.end();\n    \n        requestAnimationFrame(() => { this.GameLoop(); })\n    }\n    // #endregion\n\n    // #region AddStar\n    /**\n     * Fügt eine Sphäre an eine zufällige Position in der Szene\n     */\n    private AddStar()\n    {\n        let geometry = new THREE.SphereGeometry(0.25);\n        let material = new THREE.MeshStandardMaterial( { color: 0xFFFFFF });\n        let star = new THREE.Mesh( geometry, material )\n\n        star.position.set(\n            THREE.MathUtils.randFloatSpread(100),\n            THREE.MathUtils.randFloatSpread(100),\n            THREE.MathUtils.randFloatSpread(100)\n        );\n\n        this.mainScene.add(star);\n    }\n    // #endregion\n\n    // #region ShowOverlay\n    /**\n     * Displays the overlay with the specified Text\n     * \n     * @param text The text to display\n     * @throws {Error} Will be thrown if {@link Load} was not called yet\n     */\n    private ShowOverlay(text: string): void\n    {\n        if (this.overlayElement == null || this.overlayTextElement == null)\n        {\n            throw new Error(\"Overlay-HTML-Element are null. Did you call Load()?\");\n        }\n\n        this.overlayElement.classList.remove(\"Hide\");\n        this.overlayTextElement.innerText = text;\n    }\n    // #endregion\n\n    // #region HideOverlay\n    /**\n     * Hides the Overlay\n     * \n     * @throws {Error} Will be thrown if {@link Load} was not called yet\n     */\n    private HideOverlay(): void\n    {\n        if (this.overlayElement == null || this.overlayTextElement == null)\n        {\n            throw new Error(\"Overlay-HTML-Element are null. Did you call Load()?\");\n        }\n\n        this.overlayElement.classList.add(\"Hide\");\n        this.overlayTextElement.innerText = \"\";\n    }\n    // #endregion\n}\n\nlet main = new Main();\n\nsetTimeout(() => { main.Load(); }, 0);\n\n\n/*document.addEventListener(\n    \"resize\", \n    () =>\n    {\n        mainRenderer.setSize(window.innerWidth, window.innerHeight);\n    }\n);*/"],"names":["CubicBezier","THREE.Vector3","THREE.Scene","THREE.PerspectiveCamera","THREE.WebGLRenderer","THREE.Clock","THREE.TorusGeometry","THREE.MeshStandardMaterial","THREE.Mesh","THREE.PointLight","THREE.AmbientLight","THREE.PointLightHelper","THREE.GridHelper","THREE.TextureLoader","THREE.SphereGeometry","THREE.MathUtils"],"mappings":"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"}